doctype html
html(lang='en',ng-app='BookApp')
  head
    title= title
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(href='/libs/flat-ui/dist/css/vendor/bootstrap.min.css', rel='stylesheet', media='screen')
    link(href='/libs/flat-ui/dist/css/flat-ui.min.css', rel='stylesheet')
    lin(href='/stylesheets/styles.css', rel='stylesheet')
  body(ng-controller="SearchController",style='overflow: scroll;')
    block content
  script(src='/libs/flat-ui/dist/js/vendor/jquery.min.js', type='text/javascript')
  script(src='/libs/angular/angular.min.js', type='text/javascript')
  script(src='/libs/flat-ui/dist/js/flat-ui.min.js', type='text/javascript')
  script(src='/js/controllers/SearchController.js', type='text/javascript')
  script(src='/libs/bootstrap-waitingfor/build/bootstrap-waitingfor.min.js', type='text/javascript')
  script(src='../node_modules/pdfjs-dist/build/pdf.js', type='text/javascript')
  script.
    PDFThumbGenerator = function(img,dataholder,fileTag)
    {
        console.log("PDFThumbGenerator");
        console.log(img);
        console.log(fileTag);

        var reader = new FileReader();
        reader.readAsBinaryString(fileTag.files[0]);
        reader.onloadend = function(e){
            // var dataout = document.getElementById("dataout");
            // dataout.innerHTML = "data:"+e.target.result;
            var pdfdata = new Uint8Array(e.target.result.length);
            for(var i=0;i<e.target.result.length;i++) pdfdata[i] = e.target.result.charCodeAt(i);
            console.log("load done");
            parsepdf(pdfdata);
        };

        var parsepdf = function(pdfdata)
        {
          console.log("parsing pdf...");
          PDFJS.getDocument(pdfdata).then( function (pdf) {
            pdf.getPage(1).then( function (page) {
              var viewport = page.getViewport(0.5);
              var canvas = document.createElement('canvas');
              var ctx = canvas.getContext('2d');
              canvas.height = viewport.height;
              canvas.width = viewport.width;
              canvas.style.display = "default";
              canvas.style.height = viewport.height;
              canvas.style.width = viewport.width;

              var renderContext = {
                  canvasContext: ctx,
                  viewport: viewport
              };

              page.render(renderContext).then( function() {
                //set to draw behind current content
                ctx.globalCompositeOperation = "destination-over";
                //set background color
                ctx.fillStyle = "#fff";
                //draw on entire canvas
                ctx.fillRect( 0, 0, canvas.width, canvas.height );
                // create an img from the canvas which contains the page contents
                var img_src = canvas.toDataURL();
                dataholder.value = canvas.toDataURL();
                img.src=img_src;
                canvas.remove();                    
                //$(canvas).remove();
              });
            }); // end of getPage
          }); // end of getDocument
        }
    }
  
    
